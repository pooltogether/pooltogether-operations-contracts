{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\n\ninterface KeeperCompatibleInterface {\n\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(\n    bytes calldata checkData\n  )\n    external\n    returns (\n      bool upkeepNeeded,\n      bytes memory performData\n    );\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(\n    bytes calldata performData\n  ) external;\n}"
    },
    "contracts/PrizeStrategyUpkeep.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\npragma experimental ABIEncoderV2;\n\n\nimport \"./interfaces/KeeperCompatibleInterface.sol\";\nimport \"./interfaces/PeriodicPrizeStrategyInterface.sol\";\nimport \"./interfaces/PrizePoolRegistryInterface.sol\";\nimport \"./interfaces/PrizePoolInterface.sol\";\nimport \"./utils/SafeAwardable.sol\";\n\n\n///@notice Contract implements Chainlink's Upkeep system interface, automating the upkeep of PrizePools in the associated registry. \ncontract PrizeStrategyUpkeep is KeeperCompatibleInterface {\n\n    using SafeAwardable for address;\n\n    address public prizePoolRegistry;\n\n    uint public upkeepBatchSize;\n    \n    constructor(address _prizePoolRegistry, uint256 _upkeepBatchSize) public {\n        prizePoolRegistry = _prizePoolRegistry;\n        upkeepBatchSize = _upkeepBatchSize;\n    }\n\n    /// @notice Checks if PrizePools require upkeep. Call in a static manner every block by the Chainlink Upkeep network.\n    /// @param checkData Not used in this implementation.\n    /// @return upkeepNeeded as true if performUpkeep() needs to be called, false otherwise. performData returned empty. \n    function checkUpkeep(bytes calldata checkData) view override external returns (bool upkeepNeeded, bytes memory performData){ // check view\n\n        address[] memory prizePools = PrizePoolRegistryInterface(prizePoolRegistry).getPrizePools();\n\n        // check if canStartAward()\n        for(uint256 pool = 0; pool < prizePools.length; pool++){\n            address prizeStrategy = PrizePoolInterface(prizePools[pool]).prizeStrategy();\n            if(prizeStrategy.canStartAward()){\n                return (true, performData);\n            } \n        }\n        // check if canCompleteAward()\n        for(uint256 pool = 0; pool < prizePools.length; pool++){\n            address prizeStrategy = PrizePoolInterface(prizePools[pool]).prizeStrategy();\n            if(prizeStrategy.canCompleteAward()){\n                return (true, performData);\n            } \n        }\n        return (false, performData);\n    }\n   /// @notice Performs upkeep on the prize pools. \n    /// @param performData Not used in this implementation.\n    function performUpkeep(bytes calldata performData) override external{\n\n        address[] memory prizePools = PrizePoolRegistryInterface(prizePoolRegistry).getPrizePools();\n     \n        uint256 batchCounter = upkeepBatchSize; //counter for batch\n        uint256 poolIndex = 0;\n        \n        while(batchCounter > 0 && poolIndex < prizePools.length){\n            \n            address prizeStrategy = PrizePoolInterface(prizePools[poolIndex]).prizeStrategy();\n            \n            if(prizeStrategy.canStartAward()){\n                PeriodicPrizeStrategyInterface(prizeStrategy).startAward();\n                batchCounter--;\n            }\n            else if(prizeStrategy.canCompleteAward()){\n                PeriodicPrizeStrategyInterface(prizeStrategy).completeAward();\n                batchCounter--;\n            }\n            poolIndex++;            \n        }\n  \n    }\n\n}\n\n\n"
    },
    "contracts/interfaces/PeriodicPrizeStrategyInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\ninterface PeriodicPrizeStrategyInterface {\n  function startAward() external;\n  function completeAward() external;\n  function canStartAward() external view returns (bool);\n  function canCompleteAward() external view returns (bool);\n}"
    },
    "contracts/interfaces/PrizePoolRegistryInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\ninterface PrizePoolRegistryInterface {\n    function getPrizePools() external view returns(address[] memory);\n}"
    },
    "contracts/interfaces/PrizePoolInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\ninterface PrizePoolInterface {\n    function prizeStrategy() external view returns (address);\n}"
    },
    "contracts/utils/SafeAwardable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/PeriodicPrizeStrategyInterface.sol\";\n\n\n///@notice Wrapper library for address that checks that the address supports canStartAward() and canCompleteAward() before calling\nlibrary SafeAwardable{\n\n    ///@return canCompleteAward returns true if the function is supported AND can be completed \n    function canCompleteAward(address self) internal view returns (bool canCompleteAward){\n        if(supportsFunction(self, PeriodicPrizeStrategyInterface.canCompleteAward.selector)){\n            return PeriodicPrizeStrategyInterface(self).canCompleteAward();      \n        }\n        return false;\n    }\n\n    ///@return canStartAward returns true if the function is supported AND can be started, false otherwise\n    function canStartAward(address self) internal view returns (bool canStartAward){\n        if(supportsFunction(self, PeriodicPrizeStrategyInterface.canStartAward.selector)){\n            return PeriodicPrizeStrategyInterface(self).canStartAward();\n        }\n        return false;\n    }\n    \n    ///@param selector is the function selector to check against\n    ///@return success returns true if function is implemented, false otherwise\n    function supportsFunction(address self, bytes4 selector) internal view returns (bool success){\n        bytes memory encodedParams = abi.encodeWithSelector(selector);\n        (bool success, bytes memory result) = self.staticcall{ gas: 30000 }(encodedParams);\n        if (result.length < 32){\n            return (false);\n        }\n        if(!success && result.length > 0){\n            revert(string(result));\n        }\n        return (success);\n    }\n}"
    },
    "contracts/PrizePoolRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./interfaces/KeeperCompatibleInterface.sol\";\nimport \"./interfaces/PeriodicPrizeStrategyInterface.sol\";\nimport \"./interfaces/PrizePoolInterface.sol\";\nimport \"./utils/MappedSinglyLinkedList.sol\";\n\n\n\n///@notice A registry to hold Prize Pool addresses.  Underlying data structure is a singly linked list. \ncontract PrizePoolRegistry is Ownable {\n\n    using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\n\n    event PrizePoolAdded(address indexed prizePool);\n    event PrizePoolRemoved(address indexed prizePool);\n\n    MappedSinglyLinkedList.Mapping internal prizePoolList;\n\n    constructor() Ownable(){\n        prizePoolList.initialize();\n    }\n\n\n    /// @notice Returns an array of all prizePools in the linked list\n    ///@return Array of prize pool addresses\n    function getPrizePools() view external returns(address[] memory){\n        return prizePoolList.addressArray();\n    } \n\n    /// @notice Adds addresses to the linked list. Will revert if the address is already in the list.  Can only be called by the Registry owner.\n    /// @param _prizePools Array of prizePool addresses\n    function addPrizePools(address[] calldata _prizePools) public onlyOwner {\n        for(uint256 prizePool = 0; prizePool < _prizePools.length; prizePool++ ){ \n            prizePoolList.addAddress(_prizePools[prizePool]);\n            emit PrizePoolAdded(_prizePools[prizePool]);\n        }\n    }\n\n    /// @notice Removes an address from the linked list. Can only be called by the Registry owner.\n    /// @param _previousPrizePool The address positionally localed before the address that will be deleted. This may be the SENTINEL address if the list contains one prize pool address\n    /// @param _prizePool The address to remove from the linked list. \n    function removePrizePool(address _previousPrizePool, address _prizePool) public onlyOwner{\n        prizePoolList.removeAddress(_previousPrizePool, _prizePool); \n        emit PrizePoolRemoved(_prizePool);\n    } \n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/utils/MappedSinglyLinkedList.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.7.6;\n\n/// @notice An efficient implementation of a singly linked list of addresses\n/// @dev A mapping(address => address) tracks the 'next' pointer.  A special address called the SENTINEL is used to denote the beginning and end of the list.\nlibrary MappedSinglyLinkedList {\n\n  /// @notice The special value address used to denote the end of the list\n  address public constant SENTINEL = address(0x1);\n\n  /// @notice The data structure to use for the list.\n  struct Mapping {\n    uint256 count;\n\n    mapping(address => address) addressMap;\n  }\n\n  /// @notice Initializes the list.\n  /// @dev It is important that this is called so that the SENTINEL is correctly setup.\n  function initialize(Mapping storage self) internal {\n    require(self.count == 0, \"Already init\");\n    self.addressMap[SENTINEL] = SENTINEL;\n  }\n\n  function start(Mapping storage self) internal view returns (address) {\n    return self.addressMap[SENTINEL];\n  }\n\n  function next(Mapping storage self, address current) internal view returns (address) {\n    return self.addressMap[current];\n  }\n\n  function end(Mapping storage) internal pure returns (address) {\n    return SENTINEL;\n  }\n\n  function addAddresses(Mapping storage self, address[] memory addresses) internal {\n    for (uint256 i = 0; i < addresses.length; i++) {\n      addAddress(self, addresses[i]);\n    }\n  }\n\n  /// @notice Adds an address to the front of the list.\n  /// @param self The Mapping struct that this function is attached to\n  /// @param newAddress The address to shift to the front of the list\n  function addAddress(Mapping storage self, address newAddress) internal {\n    require(newAddress != SENTINEL && newAddress != address(0), \"Invalid address\");\n    require(self.addressMap[newAddress] == address(0), \"Already added\");\n    self.addressMap[newAddress] = self.addressMap[SENTINEL];\n    self.addressMap[SENTINEL] = newAddress;\n    self.count = self.count + 1;\n  }\n\n  /// @notice Removes an address from the list\n  /// @param self The Mapping struct that this function is attached to\n  /// @param prevAddress The address that precedes the address to be removed.  This may be the SENTINEL if at the start.\n  /// @param addr The address to remove from the list.\n  function removeAddress(Mapping storage self, address prevAddress, address addr) internal {\n    require(addr != SENTINEL && addr != address(0), \"Invalid address\");\n    require(self.addressMap[prevAddress] == addr, \"Invalid prevAddress\");\n    self.addressMap[prevAddress] = self.addressMap[addr];\n    delete self.addressMap[addr];\n    self.count = self.count - 1;\n  }\n\n  /// @notice Determines whether the list contains the given address\n  /// @param self The Mapping struct that this function is attached to\n  /// @param addr The address to check\n  /// @return True if the address is contained, false otherwise.\n  function contains(Mapping storage self, address addr) internal view returns (bool) {\n    return addr != SENTINEL && addr != address(0) && self.addressMap[addr] != address(0);\n  }\n\n  /// @notice Returns an address array of all the addresses in this list\n  /// @dev Contains a for loop, so complexity is O(n) wrt the list size\n  /// @param self The Mapping struct that this function is attached to\n  /// @return An array of all the addresses\n  function addressArray(Mapping storage self) internal view returns (address[] memory) {\n    address[] memory array = new address[](self.count);\n    uint256 count;\n    address currentAddress = self.addressMap[SENTINEL];\n    while (currentAddress != address(0) && currentAddress != SENTINEL) {\n      array[count] = currentAddress;\n      currentAddress = self.addressMap[currentAddress];\n      count++;\n    }\n    return array;\n  }\n\n  /// @notice Removes every address from the list\n  /// @param self The Mapping struct that this function is attached to\n  function clearAll(Mapping storage self) internal {\n    address currentAddress = self.addressMap[SENTINEL];\n    while (currentAddress != address(0) && currentAddress != SENTINEL) {\n      address nextAddress = self.addressMap[currentAddress];\n      delete self.addressMap[currentAddress];\n      currentAddress = nextAddress;\n    }\n    self.addressMap[SENTINEL] = SENTINEL;\n    self.count = 0;\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/test/MappedSinglyLinkedListExposed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"../utils/MappedSinglyLinkedList.sol\";\n\ncontract MappedSinglyLinkedListExposed {\n  using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\n\n  MappedSinglyLinkedList.Mapping public list;\n\n  function initialize() external {\n    list.initialize();\n  }\n\n  function addressArray() external view returns (address[] memory) {\n    return list.addressArray();\n  }\n\n  function addAddresses(address[] calldata addresses) external {\n    list.addAddresses(addresses);\n  }\n\n  function addAddress(address newAddress) external {\n    list.addAddress(newAddress);\n  }\n\n  function removeAddress(address prevAddress, address addr) external {\n    list.removeAddress(prevAddress, addr);\n  }\n\n  function contains(address addr) external view returns (bool) {\n    return list.contains(addr);\n  }\n\n  function clearAll() external {\n    list.clearAll();\n  }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}