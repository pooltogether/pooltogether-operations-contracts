{
  "address": "0x0d6487BcF92a805a811BcB1e1c9b2425DE3aA703",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_prizePoolRegistry",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_upkeepBatchSize",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prizePoolRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upkeepBatchSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x028e0f1c6f5c46ce12d886dc9f6346ca3b05217ef1cf122846667411138e8d64",
  "receipt": {
    "to": null,
    "from": "0x8a6897bc4965cB3FA6a2DB3283Be068908064D13",
    "contractAddress": "0x0d6487BcF92a805a811BcB1e1c9b2425DE3aA703",
    "transactionIndex": 8,
    "gasUsed": "619247",
    "logsBloom": "0x
    "blockHash": "0xf5d5078c2827d20e1b90b8bb2bb8d9a80953e371127249181d7eb361cdb800d6",
    "transactionHash": "0x028e0f1c6f5c46ce12d886dc9f6346ca3b05217ef1cf122846667411138e8d64",
    "logs": [],
    "blockNumber": 23842563,
    "cumulativeGasUsed": "1772531",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcb901A9a76D01A16b1a0529F30110Dd0F9A77024",
    5
  ],
  "solcInputHash": "4e8203afa008e9aec6b04940a7a9a5b1",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prizePoolRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_upkeepBatchSize\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePoolRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upkeepBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"params\":{\"checkData\":\"Not used in this implementation.\"},\"returns\":{\"upkeepNeeded\":\"as true if performUpkeep() needs to be called, false otherwise. performData returned empty. \"}},\"performUpkeep(bytes)\":{\"params\":{\"performData\":\"Not used in this implementation.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"Checks if PrizePools require upkeep. Call in a static manner every block by the Chainlink Upkeep network.\"},\"performUpkeep(bytes)\":{\"notice\":\"Performs upkeep on the prize pools. \"}},\"notice\":\"Contract implements Chainlink's Upkeep system interface, automating the upkeep of PrizePools in the associated registry. \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PrizeStrategyUpkeep.sol\":\"PrizeStrategyUpkeep\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/PrizeStrategyUpkeep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\nimport \\\"./interfaces/PeriodicPrizeStrategyInterface.sol\\\";\\nimport \\\"./interfaces/PrizePoolRegistryInterface.sol\\\";\\nimport \\\"./interfaces/PrizePoolInterface.sol\\\";\\nimport \\\"./utils/SafeAwardable.sol\\\";\\n\\n\\n///@notice Contract implements Chainlink's Upkeep system interface, automating the upkeep of PrizePools in the associated registry. \\ncontract PrizeStrategyUpkeep is KeeperCompatibleInterface {\\n\\n    using SafeAwardable for address;\\n\\n    address public prizePoolRegistry;\\n\\n    uint public upkeepBatchSize;\\n    \\n    constructor(address _prizePoolRegistry, uint256 _upkeepBatchSize) public {\\n        prizePoolRegistry = _prizePoolRegistry;\\n        upkeepBatchSize = _upkeepBatchSize;\\n    }\\n\\n    /// @notice Checks if PrizePools require upkeep. Call in a static manner every block by the Chainlink Upkeep network.\\n    /// @param checkData Not used in this implementation.\\n    /// @return upkeepNeeded as true if performUpkeep() needs to be called, false otherwise. performData returned empty. \\n    function checkUpkeep(bytes calldata checkData) override external returns (bool upkeepNeeded, bytes memory performData){ // check view\\n\\n        address[] memory prizePools = PrizePoolRegistryInterface(prizePoolRegistry).getPrizePools();\\n\\n        // check if canStartAward()\\n        for(uint256 pool = 0; pool < prizePools.length; pool++){\\n            address prizeStrategy = PrizePoolInterface(prizePools[pool]).prizeStrategy();\\n            if(prizeStrategy.canStartAward()){\\n                return (true, performData);\\n            } \\n        }\\n        // check if canCompleteAward()\\n        for(uint256 pool = 0; pool < prizePools.length; pool++){\\n            address prizeStrategy = PrizePoolInterface(prizePools[pool]).prizeStrategy();\\n            if(prizeStrategy.canCompleteAward()){\\n                return (true, performData);\\n            } \\n        }\\n        return (false, performData);\\n    }\\n   /// @notice Performs upkeep on the prize pools. \\n    /// @param performData Not used in this implementation.\\n    function performUpkeep(bytes calldata performData) override external{\\n\\n        address[] memory prizePools = PrizePoolRegistryInterface(prizePoolRegistry).getPrizePools();\\n     \\n        uint256 batchCounter = upkeepBatchSize; //counter for batch\\n        uint256 poolIndex = 0;\\n        \\n        while(batchCounter > 0 && poolIndex < prizePools.length){\\n            \\n            address prizeStrategy = PrizePoolInterface(prizePools[poolIndex]).prizeStrategy();\\n            \\n            if(prizeStrategy.canStartAward()){\\n                PeriodicPrizeStrategyInterface(prizeStrategy).startAward();\\n                batchCounter--;\\n            }\\n            else if(prizeStrategy.canCompleteAward()){\\n                PeriodicPrizeStrategyInterface(prizeStrategy).completeAward();\\n                batchCounter--;\\n            }\\n            poolIndex++;            \\n        }\\n  \\n    }\\n\\n}\\n\\n\\n\",\"keccak256\":\"0x3e6dd5b172020ef71dc5f6e2dfee003e276cfe19f920512d89ebf0f016ce0060\",\"license\":\"MIT\"},\"contracts/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface KeeperCompatibleInterface {\\n\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(\\n    bytes calldata checkData\\n  )\\n    external\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData\\n    );\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(\\n    bytes calldata performData\\n  ) external;\\n}\",\"keccak256\":\"0x5174919ce142bffa1517f63837e932ce18224d3b4cda828e0d88ff8a5b99d920\",\"license\":\"MIT\"},\"contracts/interfaces/PeriodicPrizeStrategyInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface PeriodicPrizeStrategyInterface {\\n  function startAward() external;\\n  function completeAward() external;\\n  function canStartAward() external view returns (bool);\\n  function canCompleteAward() external view returns (bool);\\n}\",\"keccak256\":\"0x109f0a01f57f08936e7bb94fe357fa71e7237794f6f8576c37c773a80dcd155f\",\"license\":\"MIT\"},\"contracts/interfaces/PrizePoolInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface PrizePoolInterface {\\n    function prizeStrategy() external returns (address);\\n}\",\"keccak256\":\"0xdebf90b28b22d82ca90297dc816a0248a7dbf52168f6a032dc68c80f85ebc42c\",\"license\":\"MIT\"},\"contracts/interfaces/PrizePoolRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface PrizePoolRegistryInterface {\\n    function getPrizePools() external returns(address[] memory);\\n}\",\"keccak256\":\"0xc88c04d1fce84ed2d89aa47bb0c25bf880448c97c567b6ac40bc69d515803b75\",\"license\":\"MIT\"},\"contracts/utils/SafeAwardable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/PeriodicPrizeStrategyInterface.sol\\\";\\n\\n\\n///@notice Wrapper library for address that checks that the address supports canStartAward() and canCompleteAward() before calling\\nlibrary SafeAwardable{\\n\\n    ///@return canCompleteAward returns true if the function is supported AND can be completed \\n    function canCompleteAward(address self) internal returns (bool canCompleteAward){\\n        if(supportsFunction(self, PeriodicPrizeStrategyInterface.canCompleteAward.selector)){\\n            return PeriodicPrizeStrategyInterface(self).canCompleteAward();      \\n        }\\n        return false;\\n    }\\n\\n    ///@return canStartAward returns true if the function is supported AND can be started, false otherwise\\n    function canStartAward(address self) internal returns (bool canStartAward){\\n        if(supportsFunction(self, PeriodicPrizeStrategyInterface.canStartAward.selector)){\\n            return PeriodicPrizeStrategyInterface(self).canStartAward();\\n        }\\n        return false;\\n    }\\n    \\n    ///@param selector is the function selector to check against\\n    ///@return success returns true if function is implemented, false otherwise\\n    function supportsFunction(address self, bytes4 selector) internal returns (bool success){\\n        bytes memory encodedParams = abi.encodeWithSelector(selector);\\n        (bool success, bytes memory result) = self.staticcall{ gas: 30000 }(encodedParams);\\n        if (result.length < 32){\\n            return (false);\\n        }\\n        if(!success && result.length > 0){\\n            revert(string(result));\\n        }\\n        return (success);\\n    }\\n}\",\"keccak256\":\"0x5f93fc3698d9ebb18c6202f8adeb21ebb9d1fa6387db5f23391ce490e8a337d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a14380380610a1483398101604081905261002f91610058565b600080546001600160a01b0319166001600160a01b039390931692909217909155600155610090565b6000806040838503121561006a578182fd5b82516001600160a01b0381168114610080578283fd5b6020939093015192949293505050565b6109758061009f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632dc41821146100515780634585e33b1461006f5780636e04ff0d14610084578063ad06337f146100a5575b600080fd5b6100596100ba565b6040516100669190610906565b60405180910390f35b61008261007d366004610807565b6100c0565b005b610097610092366004610807565b6102ee565b6040516100669291906108d0565b6100ad610514565b60405161006691906108bc565b60015481565b60008060009054906101000a90046001600160a01b03166001600160a01b031663a28e62196040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561011157600080fd5b505af1158015610125573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261014d9190810190610732565b60015490915060005b6000821180156101665750825181105b156102e757600083828151811061017957fe5b60200260200101516001600160a01b03166398bf3eb66040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156101bb57600080fd5b505af11580156101cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f39190610711565b9050610207816001600160a01b0316610523565b1561026c57806001600160a01b031663b9ee1e056040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561024757600080fd5b505af115801561025b573d6000803e3d6000fd5b505060001990940193506102de9050565b61027e816001600160a01b03166105bc565b156102de57806001600160a01b031663dfb2f13b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156102be57600080fd5b505af11580156102d2573d6000803e3d6000fd5b50506000199094019350505b50600101610156565b5050505050565b6000606060008060009054906101000a90046001600160a01b03166001600160a01b031663a28e62196040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561034357600080fd5b505af1158015610357573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261037f9190810190610732565b905060005b815181101561044357600082828151811061039b57fe5b60200260200101516001600160a01b03166398bf3eb66040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156103dd57600080fd5b505af11580156103f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104159190610711565b9050610429816001600160a01b0316610523565b1561043a576001945050505061050d565b50600101610384565b5060005b815181101561050657600082828151811061045e57fe5b60200260200101516001600160a01b03166398bf3eb66040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156104a057600080fd5b505af11580156104b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d89190610711565b90506104ec816001600160a01b03166105bc565b156104fd576001945050505061050d565b50600101610447565b5060009250505b9250929050565b6000546001600160a01b031681565b6000610536826343b7ae3f60e11b61060d565b156105b357816001600160a01b031663876f5c7e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561057457600080fd5b505afa158015610588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ac91906107e7565b90506105b7565b5060005b919050565b60006105cf82636a74f10760e01b61060d565b156105b357816001600160a01b0316636a74f1076040518163ffffffff1660e01b815260040160206040518083038186803b15801561057457600080fd5b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198516179052905160009190829081906001600160a01b038716906175309061065c9086906108a0565b6000604051808303818686fa925050503d8060008114610698576040519150601f19603f3d011682016040523d82523d6000602084013e61069d565b606091505b50915091506020815110156106b857600093505050506106f4565b811580156106c7575060008151115b156106ef578060405162461bcd60e51b81526004016106e691906108f3565b60405180910390fd5b509150505b92915050565b80516001600160a01b03811681146105b757600080fd5b600060208284031215610722578081fd5b61072b826106fa565b9392505050565b60006020808385031215610744578182fd5b825167ffffffffffffffff8082111561075b578384fd5b818501915085601f83011261076e578384fd5b81518181111561077a57fe5b8381026040518582820101818110858211171561079357fe5b604052828152858101935084860182860187018a10156107b1578788fd5b8795505b838610156107da576107c6816106fa565b8552600195909501949386019386016107b5565b5098975050505050505050565b6000602082840312156107f8578081fd5b8151801515811461072b578182fd5b60008060208385031215610819578081fd5b823567ffffffffffffffff80821115610830578283fd5b818501915085601f830112610843578283fd5b813581811115610851578384fd5b866020828501011115610862578384fd5b60209290920196919550909350505050565b6000815180845261088c81602086016020860161090f565b601f01601f19169290920160200192915050565b600082516108b281846020870161090f565b9190910192915050565b6001600160a01b0391909116815260200190565b60008315158252604060208301526108eb6040830184610874565b949350505050565b60006020825261072b6020830184610874565b90815260200190565b60005b8381101561092a578181015183820152602001610912565b83811115610939576000848401525b5050505056fea2646970667358221220584bcdbd005e7d5ca8c39069fb7523605719692b1c8f07f7699f7cef60140eff64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632dc41821146100515780634585e33b1461006f5780636e04ff0d14610084578063ad06337f146100a5575b600080fd5b6100596100ba565b6040516100669190610906565b60405180910390f35b61008261007d366004610807565b6100c0565b005b610097610092366004610807565b6102ee565b6040516100669291906108d0565b6100ad610514565b60405161006691906108bc565b60015481565b60008060009054906101000a90046001600160a01b03166001600160a01b031663a28e62196040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561011157600080fd5b505af1158015610125573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261014d9190810190610732565b60015490915060005b6000821180156101665750825181105b156102e757600083828151811061017957fe5b60200260200101516001600160a01b03166398bf3eb66040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156101bb57600080fd5b505af11580156101cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f39190610711565b9050610207816001600160a01b0316610523565b1561026c57806001600160a01b031663b9ee1e056040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561024757600080fd5b505af115801561025b573d6000803e3d6000fd5b505060001990940193506102de9050565b61027e816001600160a01b03166105bc565b156102de57806001600160a01b031663dfb2f13b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156102be57600080fd5b505af11580156102d2573d6000803e3d6000fd5b50506000199094019350505b50600101610156565b5050505050565b6000606060008060009054906101000a90046001600160a01b03166001600160a01b031663a28e62196040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561034357600080fd5b505af1158015610357573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261037f9190810190610732565b905060005b815181101561044357600082828151811061039b57fe5b60200260200101516001600160a01b03166398bf3eb66040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156103dd57600080fd5b505af11580156103f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104159190610711565b9050610429816001600160a01b0316610523565b1561043a576001945050505061050d565b50600101610384565b5060005b815181101561050657600082828151811061045e57fe5b60200260200101516001600160a01b03166398bf3eb66040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156104a057600080fd5b505af11580156104b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d89190610711565b90506104ec816001600160a01b03166105bc565b156104fd576001945050505061050d565b50600101610447565b5060009250505b9250929050565b6000546001600160a01b031681565b6000610536826343b7ae3f60e11b61060d565b156105b357816001600160a01b031663876f5c7e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561057457600080fd5b505afa158015610588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ac91906107e7565b90506105b7565b5060005b919050565b60006105cf82636a74f10760e01b61060d565b156105b357816001600160a01b0316636a74f1076040518163ffffffff1660e01b815260040160206040518083038186803b15801561057457600080fd5b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198516179052905160009190829081906001600160a01b038716906175309061065c9086906108a0565b6000604051808303818686fa925050503d8060008114610698576040519150601f19603f3d011682016040523d82523d6000602084013e61069d565b606091505b50915091506020815110156106b857600093505050506106f4565b811580156106c7575060008151115b156106ef578060405162461bcd60e51b81526004016106e691906108f3565b60405180910390fd5b509150505b92915050565b80516001600160a01b03811681146105b757600080fd5b600060208284031215610722578081fd5b61072b826106fa565b9392505050565b60006020808385031215610744578182fd5b825167ffffffffffffffff8082111561075b578384fd5b818501915085601f83011261076e578384fd5b81518181111561077a57fe5b8381026040518582820101818110858211171561079357fe5b604052828152858101935084860182860187018a10156107b1578788fd5b8795505b838610156107da576107c6816106fa565b8552600195909501949386019386016107b5565b5098975050505050505050565b6000602082840312156107f8578081fd5b8151801515811461072b578182fd5b60008060208385031215610819578081fd5b823567ffffffffffffffff80821115610830578283fd5b818501915085601f830112610843578283fd5b813581811115610851578384fd5b866020828501011115610862578384fd5b60209290920196919550909350505050565b6000815180845261088c81602086016020860161090f565b601f01601f19169290920160200192915050565b600082516108b281846020870161090f565b9190910192915050565b6001600160a01b0391909116815260200190565b60008315158252604060208301526108eb6040830184610874565b949350505050565b60006020825261072b6020830184610874565b90815260200190565b60005b8381101561092a578181015183820152602001610912565b83811115610939576000848401525b5050505056fea2646970667358221220584bcdbd005e7d5ca8c39069fb7523605719692b1c8f07f7699f7cef60140eff64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "params": {
          "checkData": "Not used in this implementation."
        },
        "returns": {
          "upkeepNeeded": "as true if performUpkeep() needs to be called, false otherwise. performData returned empty. "
        }
      },
      "performUpkeep(bytes)": {
        "params": {
          "performData": "Not used in this implementation."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkUpkeep(bytes)": {
        "notice": "Checks if PrizePools require upkeep. Call in a static manner every block by the Chainlink Upkeep network."
      },
      "performUpkeep(bytes)": {
        "notice": "Performs upkeep on the prize pools. "
      }
    },
    "notice": "Contract implements Chainlink's Upkeep system interface, automating the upkeep of PrizePools in the associated registry. ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 255,
        "contract": "contracts/PrizeStrategyUpkeep.sol:PrizeStrategyUpkeep",
        "label": "prizePoolRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 257,
        "contract": "contracts/PrizeStrategyUpkeep.sol:PrizeStrategyUpkeep",
        "label": "upkeepBatchSize",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}