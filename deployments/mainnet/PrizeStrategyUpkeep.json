{
  "address": "0x037e907fFA9df4f8D13dA5B0BE5e9F317AD6e0Ef",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AddressRegistry",
          "name": "_prizePoolRegistry",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_upkeepBatchSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_upkeepMinimumBlockInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upkeepBatchSize",
          "type": "uint256"
        }
      ],
      "name": "UpkeepBatchSizeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upkeepMinimumBlockInterval",
          "type": "uint256"
        }
      ],
      "name": "UpkeepMinimumBlockIntervalUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startAwardsPerformed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "completeAwardsPerformed",
          "type": "uint256"
        }
      ],
      "name": "UpkeepPerformed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract AddressRegistry",
          "name": "prizePoolRegistry",
          "type": "address"
        }
      ],
      "name": "UpkeepPrizePoolRegistryUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prizePoolRegistry",
      "outputs": [
        {
          "internalType": "contract AddressRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AddressRegistry",
          "name": "_prizePoolRegistry",
          "type": "address"
        }
      ],
      "name": "updatePrizePoolRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_upkeepBatchSize",
          "type": "uint256"
        }
      ],
      "name": "updateUpkeepBatchSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_upkeepMinimumBlockInterval",
          "type": "uint256"
        }
      ],
      "name": "updateUpkeepMinimumBlockInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upkeepBatchSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upkeepLastUpkeepBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upkeepMinimumBlockInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f054ecd405bfcbae2b31c5d975173dfeb55becec7a57e5bd29e0801d5934c1c",
  "receipt": {
    "to": null,
    "from": "0x3F0556bCA55Bdbb78A9316936067a47fd4C4C4f4",
    "contractAddress": "0x037e907fFA9df4f8D13dA5B0BE5e9F317AD6e0Ef",
    "transactionIndex": 110,
    "gasUsed": "1166994",
    "logsBloom": "0x
    "blockHash": "0x91f8d70075c13484e9d206fbbbf9a0911fa54813fcb53ae02b6abab4338f9197",
    "transactionHash": "0x7f054ecd405bfcbae2b31c5d975173dfeb55becec7a57e5bd29e0801d5934c1c",
    "logs": [
      {
        "transactionIndex": 110,
        "blockNumber": 12698206,
        "transactionHash": "0x7f054ecd405bfcbae2b31c5d975173dfeb55becec7a57e5bd29e0801d5934c1c",
        "address": "0x037e907fFA9df4f8D13dA5B0BE5e9F317AD6e0Ef",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4"
        ],
        "data": "0x",
        "logIndex": 55,
        "blockHash": "0x91f8d70075c13484e9d206fbbbf9a0911fa54813fcb53ae02b6abab4338f9197"
      },
      {
        "transactionIndex": 110,
        "blockNumber": 12698206,
        "transactionHash": "0x7f054ecd405bfcbae2b31c5d975173dfeb55becec7a57e5bd29e0801d5934c1c",
        "address": "0x037e907fFA9df4f8D13dA5B0BE5e9F317AD6e0Ef",
        "topics": [
          "0x3945779a0b94143e19ceb0254d7ff1fbe6c4265b6328031e7cc1274c2b8d77c7"
        ],
        "data": "0x00000000000000000000000034733851e2047f8d0e1aa91124a6f9eadc54d253",
        "logIndex": 56,
        "blockHash": "0x91f8d70075c13484e9d206fbbbf9a0911fa54813fcb53ae02b6abab4338f9197"
      },
      {
        "transactionIndex": 110,
        "blockNumber": 12698206,
        "transactionHash": "0x7f054ecd405bfcbae2b31c5d975173dfeb55becec7a57e5bd29e0801d5934c1c",
        "address": "0x037e907fFA9df4f8D13dA5B0BE5e9F317AD6e0Ef",
        "topics": [
          "0xb722c0a05d55d91208263d973f28b92fc9599d46d7c490ff2efae89d8f3ddfe8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 57,
        "blockHash": "0x91f8d70075c13484e9d206fbbbf9a0911fa54813fcb53ae02b6abab4338f9197"
      },
      {
        "transactionIndex": 110,
        "blockNumber": 12698206,
        "transactionHash": "0x7f054ecd405bfcbae2b31c5d975173dfeb55becec7a57e5bd29e0801d5934c1c",
        "address": "0x037e907fFA9df4f8D13dA5B0BE5e9F317AD6e0Ef",
        "topics": [
          "0x7a5354403e343fa02d40d3906b696f894d8b73fb8a898b07d7414f29866ef5d3"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000f",
        "logIndex": 58,
        "blockHash": "0x91f8d70075c13484e9d206fbbbf9a0911fa54813fcb53ae02b6abab4338f9197"
      }
    ],
    "blockNumber": 12698206,
    "cumulativeGasUsed": "5206998",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x34733851E2047F8d0e1aa91124A6f9EaDc54D253",
    2,
    15
  ],
  "solcInputHash": "6c98dadaa93043e4ae4be9bc5181f214",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AddressRegistry\",\"name\":\"_prizePoolRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_upkeepBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upkeepMinimumBlockInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upkeepBatchSize\",\"type\":\"uint256\"}],\"name\":\"UpkeepBatchSizeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upkeepMinimumBlockInterval\",\"type\":\"uint256\"}],\"name\":\"UpkeepMinimumBlockIntervalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startAwardsPerformed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"completeAwardsPerformed\",\"type\":\"uint256\"}],\"name\":\"UpkeepPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract AddressRegistry\",\"name\":\"prizePoolRegistry\",\"type\":\"address\"}],\"name\":\"UpkeepPrizePoolRegistryUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePoolRegistry\",\"outputs\":[{\"internalType\":\"contract AddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AddressRegistry\",\"name\":\"_prizePoolRegistry\",\"type\":\"address\"}],\"name\":\"updatePrizePoolRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_upkeepBatchSize\",\"type\":\"uint256\"}],\"name\":\"updateUpkeepBatchSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_upkeepMinimumBlockInterval\",\"type\":\"uint256\"}],\"name\":\"updateUpkeepMinimumBlockInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upkeepBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upkeepLastUpkeepBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upkeepMinimumBlockInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"params\":{\"checkData\":\"Not used in this implementation.\"},\"returns\":{\"upkeepNeeded\":\"as true if performUpkeep() needs to be called, false otherwise. performData returned empty. \"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"performUpkeep(bytes)\":{\"params\":{\"performData\":\"Not used in this implementation.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePrizePoolRegistry(address)\":{\"params\":{\"_prizePoolRegistry\":\"New registry address\"}},\"updateUpkeepBatchSize(uint256)\":{\"params\":{\"_upkeepBatchSize\":\"Amount upkeepBatchSize will be set to\"}},\"updateUpkeepMinimumBlockInterval(uint256)\":{\"params\":{\"_upkeepMinimumBlockInterval\":\"New upkeepMinimumBlockInterval\"}}},\"stateVariables\":{\"upkeepBatchSize\":{\"details\":\"Set accordingly to prevent out-of-gas transactions during calls to performUpkeep\"}},\"version\":1},\"userdoc\":{\"events\":{\"UpkeepBatchSizeUpdated(uint256)\":{\"notice\":\"Emitted when the upkeepBatchSize has been changed\"},\"UpkeepMinimumBlockIntervalUpdated(uint256)\":{\"notice\":\"Emitted when the Upkeep Minimum Block interval is updated\"},\"UpkeepPerformed(uint256,uint256)\":{\"notice\":\"Emitted when the Upkeep has been performed\"},\"UpkeepPrizePoolRegistryUpdated(address)\":{\"notice\":\"Emitted when the prize pool registry has been changed\"}},\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"Checks if PrizePools require upkeep. Call in a static manner every block by the Chainlink Upkeep network.\"},\"pause()\":{\"notice\":\"Pauses the contract. Only callable by owner.\"},\"performUpkeep(bytes)\":{\"notice\":\"Performs upkeep on the prize pools. \"},\"prizePoolRegistry()\":{\"notice\":\"Stores the maximum number of prize strategies to upkeep. \"},\"unpause()\":{\"notice\":\"Unpauses the contract. Only callable by owner.\"},\"updatePrizePoolRegistry(address)\":{\"notice\":\"Updates the prize pool registry\"},\"updateUpkeepBatchSize(uint256)\":{\"notice\":\"Updates the upkeepBatchSize which is set to prevent out of gas situations\"},\"updateUpkeepMinimumBlockInterval(uint256)\":{\"notice\":\"Updates the upkeep minimum interval blocks\"},\"upkeepBatchSize()\":{\"notice\":\"Stores the maximum number of prize strategies to upkeep. \"},\"upkeepLastUpkeepBlockNumber()\":{\"notice\":\"Stores the last upkeep block number\"},\"upkeepMinimumBlockInterval()\":{\"notice\":\"Stores the minimum block interval between permitted performUpkeep() calls\"}},\"notice\":\"Contract implements Chainlink's Upkeep system interface, automating the upkeep of PrizePools in the associated registry. \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PrizeStrategyUpkeep.sol\":\"PrizeStrategyUpkeep\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"@pooltogether/pooltogether-generic-registry/contracts/AddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <=0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./utils/MappedSinglyLinkedList.sol\\\";\\n\\n///@notice A registry to hold Contract addresses.  Underlying data structure is a singly linked list. \\ncontract AddressRegistry is Ownable {\\n\\n    using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\\n\\n    MappedSinglyLinkedList.Mapping internal addressList;\\n\\n    /// @notice Emmitted when a contract has been added to the registry\\n    event AddressAdded(address indexed _address);\\n    \\n    /// @notice Emmitted when a contract has been removed to the registry\\n    event AddressRemoved(address indexed _address);\\n\\n    /// @notice Emitted when all the registry addresses are cleared\\n    event AllAddressesCleared();\\n\\n    /// @notice Storage field for what type of contract this Registry is storing \\n    string public addressType;    \\n\\n    /// @notice Contract constructor sets addressType, intializes list and transfers ownership\\n    /// @param _addressType The type of contracts stored in this registry \\n    /// @param _owner The address to set as owner of the contract\\n    constructor(string memory _addressType, address _owner) Ownable() {\\n        addressType = _addressType;\\n        addressList.initialize();\\n        transferOwnership(_owner);\\n    }\\n\\n    /// @notice Returns an array of all contract addresses in the linked list\\n    /// @return Array of contract addresses\\n    function getAddresses() view external returns(address[] memory) {\\n        return addressList.addressArray();\\n    } \\n\\n    /// @notice Adds addresses to the linked list. Will revert if the address is already in the list.  Can only be called by the Registry owner.\\n    /// @param _addresses Array of contract addresses to be added\\n    function addAddresses(address[] calldata _addresses) public onlyOwner {\\n        for(uint256 _address = 0; _address < _addresses.length; _address++ ){\\n            addressList.addAddress(_addresses[_address]);\\n            emit AddressAdded(_addresses[_address]);\\n        }\\n    }\\n\\n    /// @notice Removes an address from the linked list. Can only be called by the Registry owner.\\n    /// @param _previousContract The address positionally located before the address that will be deleted. This may be the SENTINEL address if the list contains one contract address\\n    /// @param _address The address to remove from the linked list. \\n    function removeAddress(address _previousContract, address _address) public onlyOwner {\\n        addressList.removeAddress(_previousContract, _address); \\n        emit AddressRemoved(_address);\\n    } \\n\\n    /// @notice Removes every address from the list\\n    function clearAll() public onlyOwner {\\n        addressList.clearAll();\\n        emit AllAddressesCleared();\\n    }\\n    \\n    /// @notice Determines whether the list contains the given address\\n    /// @param _addr The address to check\\n    /// @return True if the address is contained, false otherwise.\\n    function contains(address _addr) public returns (bool) {\\n        return addressList.contains(_addr);\\n    }\\n\\n    /// @notice Gives the address at the start of the list\\n    /// @return The address at the start of the list\\n    function start() public view returns (address) {\\n        return addressList.start();\\n    }\\n\\n    /// @notice Exposes the internal next() iterator\\n    /// @param current The current address\\n    /// @return Returns the next address in the list\\n    function next(address current) public view returns (address) {\\n        return addressList.next(current);\\n    }\\n    \\n    /// @notice Exposes the end of the list\\n    /// @return The sentinel address\\n    function end() public view returns (address) {\\n        return addressList.end();\\n    }\\n\\n}\",\"keccak256\":\"0xaf747d27e0da5eeeffd0496d32bd4e202f18253452d22bb816c541d4b09ea2f1\",\"license\":\"MIT\"},\"@pooltogether/pooltogether-generic-registry/contracts/utils/MappedSinglyLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.6;\\n\\n/// @notice An efficient implementation of a singly linked list of addresses\\n/// @dev A mapping(address => address) tracks the 'next' pointer.  A special address called the SENTINEL is used to denote the beginning and end of the list.\\nlibrary MappedSinglyLinkedList {\\n\\n  /// @notice The special value address used to denote the end of the list\\n  address public constant SENTINEL = address(0x1);\\n\\n  /// @notice The data structure to use for the list.\\n  struct Mapping {\\n    uint256 count;\\n\\n    mapping(address => address) addressMap;\\n  }\\n\\n  /// @notice Initializes the list.\\n  /// @dev It is important that this is called so that the SENTINEL is correctly setup.\\n  function initialize(Mapping storage self) internal {\\n    require(self.count == 0, \\\"Already init\\\");\\n    self.addressMap[SENTINEL] = SENTINEL;\\n  }\\n\\n  function start(Mapping storage self) internal view returns (address) {\\n    return self.addressMap[SENTINEL];\\n  }\\n\\n  function next(Mapping storage self, address current) internal view returns (address) {\\n    return self.addressMap[current];\\n  }\\n\\n  function end(Mapping storage) internal pure returns (address) {\\n    return SENTINEL;\\n  }\\n\\n  function addAddresses(Mapping storage self, address[] memory addresses) internal {\\n    for (uint256 i = 0; i < addresses.length; i++) {\\n      addAddress(self, addresses[i]);\\n    }\\n  }\\n\\n  /// @notice Adds an address to the front of the list.\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @param newAddress The address to shift to the front of the list\\n  function addAddress(Mapping storage self, address newAddress) internal {\\n    require(newAddress != SENTINEL && newAddress != address(0), \\\"Invalid address\\\");\\n    require(self.addressMap[newAddress] == address(0), \\\"Already added\\\");\\n    self.addressMap[newAddress] = self.addressMap[SENTINEL];\\n    self.addressMap[SENTINEL] = newAddress;\\n    self.count = self.count + 1;\\n  }\\n\\n  /// @notice Removes an address from the list\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @param prevAddress The address that precedes the address to be removed.  This may be the SENTINEL if at the start.\\n  /// @param addr The address to remove from the list.\\n  function removeAddress(Mapping storage self, address prevAddress, address addr) internal {\\n    require(addr != SENTINEL && addr != address(0), \\\"Invalid address\\\");\\n    require(self.addressMap[prevAddress] == addr, \\\"Invalid prevAddress\\\");\\n    self.addressMap[prevAddress] = self.addressMap[addr];\\n    delete self.addressMap[addr];\\n    self.count = self.count - 1;\\n  }\\n\\n  /// @notice Determines whether the list contains the given address\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @param addr The address to check\\n  /// @return True if the address is contained, false otherwise.\\n  function contains(Mapping storage self, address addr) internal view returns (bool) {\\n    return addr != SENTINEL && addr != address(0) && self.addressMap[addr] != address(0);\\n  }\\n\\n  /// @notice Returns an address array of all the addresses in this list\\n  /// @dev Contains a for loop, so complexity is O(n) wrt the list size\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @return An array of all the addresses\\n  function addressArray(Mapping storage self) internal view returns (address[] memory) {\\n    address[] memory array = new address[](self.count);\\n    uint256 count;\\n    address currentAddress = self.addressMap[SENTINEL];\\n    while (currentAddress != address(0) && currentAddress != SENTINEL) {\\n      array[count] = currentAddress;\\n      currentAddress = self.addressMap[currentAddress];\\n      count++;\\n    }\\n    return array;\\n  }\\n\\n  /// @notice Removes every address from the list\\n  /// @param self The Mapping struct that this function is attached to\\n  function clearAll(Mapping storage self) internal {\\n    address currentAddress = self.addressMap[SENTINEL];\\n    while (currentAddress != address(0) && currentAddress != SENTINEL) {\\n      address nextAddress = self.addressMap[currentAddress];\\n      delete self.addressMap[currentAddress];\\n      currentAddress = nextAddress;\\n    }\\n    self.addressMap[SENTINEL] = SENTINEL;\\n    self.count = 0;\\n  }\\n}\\n\",\"keccak256\":\"0x14a99407202bafc5988b8ea002afabac73c13f88372083cf381d447ef30edc85\",\"license\":\"GPL-3.0\"},\"contracts/PrizeStrategyUpkeep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\nimport \\\"./interfaces/PeriodicPrizeStrategyInterface.sol\\\";\\nimport \\\"./interfaces/PrizePoolRegistryInterface.sol\\\";\\nimport \\\"./interfaces/PrizePoolInterface.sol\\\";\\nimport \\\"./utils/SafeAwardable.sol\\\";\\n\\nimport \\\"@pooltogether/pooltogether-generic-registry/contracts/AddressRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\n///@notice Contract implements Chainlink's Upkeep system interface, automating the upkeep of PrizePools in the associated registry. \\ncontract PrizeStrategyUpkeep is KeeperCompatibleInterface, Ownable, Pausable {\\n\\n    /// @notice Ensures the target address is a prize strategy (has both canStartAward and canCompleteAward)\\n    using SafeAwardable for address;\\n\\n    /// @notice Stores the maximum number of prize strategies to upkeep. \\n    AddressRegistry public prizePoolRegistry;\\n\\n    /// @notice Stores the maximum number of prize strategies to upkeep. \\n    /// @dev Set accordingly to prevent out-of-gas transactions during calls to performUpkeep\\n    uint256 public upkeepBatchSize;\\n\\n    /// @notice Stores the last upkeep block number\\n    uint256 public upkeepLastUpkeepBlockNumber;\\n\\n    /// @notice Stores the minimum block interval between permitted performUpkeep() calls\\n    uint256 public upkeepMinimumBlockInterval;\\n\\n    /// @notice Emitted when the upkeepBatchSize has been changed\\n    event UpkeepBatchSizeUpdated(uint256 upkeepBatchSize);\\n\\n    /// @notice Emitted when the prize pool registry has been changed\\n    event UpkeepPrizePoolRegistryUpdated(AddressRegistry prizePoolRegistry);\\n\\n    /// @notice Emitted when the Upkeep Minimum Block interval is updated\\n    event UpkeepMinimumBlockIntervalUpdated(uint256 upkeepMinimumBlockInterval);\\n\\n    /// @notice Emitted when the Upkeep has been performed\\n    event UpkeepPerformed(uint256 startAwardsPerformed, uint256 completeAwardsPerformed);\\n\\n\\n    constructor(AddressRegistry _prizePoolRegistry, uint256 _upkeepBatchSize, uint256 _upkeepMinimumBlockInterval) public Ownable() {\\n        prizePoolRegistry = _prizePoolRegistry;\\n        emit UpkeepPrizePoolRegistryUpdated(_prizePoolRegistry);\\n\\n        upkeepBatchSize = _upkeepBatchSize;\\n        emit UpkeepBatchSizeUpdated(_upkeepBatchSize);\\n\\n        upkeepMinimumBlockInterval = _upkeepMinimumBlockInterval;\\n        emit UpkeepMinimumBlockIntervalUpdated(_upkeepMinimumBlockInterval);\\n    }\\n\\n\\n    /// @notice Checks if PrizePools require upkeep. Call in a static manner every block by the Chainlink Upkeep network.\\n    /// @param checkData Not used in this implementation.\\n    /// @return upkeepNeeded as true if performUpkeep() needs to be called, false otherwise. performData returned empty. \\n    function checkUpkeep(bytes calldata checkData) external view override returns (bool upkeepNeeded, bytes memory performData) {\\n\\n        if(block.number < upkeepLastUpkeepBlockNumber + upkeepMinimumBlockInterval){\\n            return (false, performData);\\n        }\\n        \\n        address[] memory prizePools = prizePoolRegistry.getAddresses();\\n\\n        // check if canStartAward()\\n        for(uint256 pool = 0; pool < prizePools.length; pool++){\\n            address prizeStrategy = PrizePoolInterface(prizePools[pool]).prizeStrategy();\\n            if(prizeStrategy.canStartAward()){\\n                return (true, performData);\\n            } \\n        }\\n        // check if canCompleteAward()\\n        for(uint256 pool = 0; pool < prizePools.length; pool++){\\n            address prizeStrategy = PrizePoolInterface(prizePools[pool]).prizeStrategy();\\n            if(prizeStrategy.canCompleteAward()){\\n                return (true, performData);\\n            } \\n        }\\n        return (false, performData);\\n    }\\n    \\n    /// @notice Performs upkeep on the prize pools. \\n    /// @param performData Not used in this implementation.\\n    function performUpkeep(bytes calldata performData) external override whenNotPaused {\\n\\n        uint256 _upkeepLastUpkeepBlockNumber = upkeepLastUpkeepBlockNumber; // SLOAD\\n        require(block.number > _upkeepLastUpkeepBlockNumber + upkeepMinimumBlockInterval, \\\"PrizeStrategyUpkeep::minimum block interval not reached\\\");\\n\\n        address[] memory prizePools = prizePoolRegistry.getAddresses();\\n\\n      \\n        uint256 batchCounter = upkeepBatchSize; //counter for batch\\n\\n        uint256 poolIndex = 0;\\n        uint256 startAwardCounter = 0;\\n        uint256 completeAwardCounter = 0;\\n\\n        uint256 updatedUpkeepBlockNumber;\\n\\n        while(batchCounter > 0 && poolIndex < prizePools.length){\\n            \\n            address prizeStrategy = PrizePoolInterface(prizePools[poolIndex]).prizeStrategy();\\n            \\n            if(prizeStrategy.canStartAward()){\\n                PeriodicPrizeStrategyInterface(prizeStrategy).startAward();\\n                startAwardCounter++;\\n                batchCounter--;\\n            }\\n            else if(prizeStrategy.canCompleteAward()){\\n                PeriodicPrizeStrategyInterface(prizeStrategy).completeAward();       \\n                completeAwardCounter++;\\n                batchCounter--;\\n            }\\n            poolIndex++;            \\n        }\\n        \\n        if(startAwardCounter > 0 || completeAwardCounter > 0){\\n            updatedUpkeepBlockNumber = block.number;\\n        }\\n\\n        // update if required\\n        if(_upkeepLastUpkeepBlockNumber != updatedUpkeepBlockNumber){\\n            upkeepLastUpkeepBlockNumber = updatedUpkeepBlockNumber; //SSTORE\\n            emit UpkeepPerformed(startAwardCounter, completeAwardCounter);\\n        }\\n  \\n    }\\n\\n\\n    /// @notice Updates the upkeepBatchSize which is set to prevent out of gas situations\\n    /// @param _upkeepBatchSize Amount upkeepBatchSize will be set to\\n    function updateUpkeepBatchSize(uint256 _upkeepBatchSize) external onlyOwner {\\n        upkeepBatchSize = _upkeepBatchSize;\\n        emit UpkeepBatchSizeUpdated(_upkeepBatchSize);\\n    }\\n\\n\\n    /// @notice Updates the prize pool registry\\n    /// @param _prizePoolRegistry New registry address\\n    function updatePrizePoolRegistry(AddressRegistry _prizePoolRegistry) external onlyOwner {\\n        prizePoolRegistry = _prizePoolRegistry;\\n        emit UpkeepPrizePoolRegistryUpdated(_prizePoolRegistry);\\n    }\\n\\n\\n    /// @notice Updates the upkeep minimum interval blocks\\n    /// @param _upkeepMinimumBlockInterval New upkeepMinimumBlockInterval\\n    function updateUpkeepMinimumBlockInterval(uint256 _upkeepMinimumBlockInterval) external onlyOwner {\\n        upkeepMinimumBlockInterval = _upkeepMinimumBlockInterval;\\n        emit UpkeepMinimumBlockIntervalUpdated(_upkeepMinimumBlockInterval);\\n    }\\n\\n    /// @notice Pauses the contract. Only callable by owner.\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the contract. Only callable by owner.\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n}\\n\\n\\n\",\"keccak256\":\"0x2993fabe20045c0903df56d61185f1c3a1703c062ae2d003f8f400baf413a756\",\"license\":\"MIT\"},\"contracts/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface KeeperCompatibleInterface {\\n\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(\\n    bytes calldata checkData\\n  )\\n    external\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData\\n    );\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(\\n    bytes calldata performData\\n  ) external;\\n}\",\"keccak256\":\"0x5174919ce142bffa1517f63837e932ce18224d3b4cda828e0d88ff8a5b99d920\",\"license\":\"MIT\"},\"contracts/interfaces/PeriodicPrizeStrategyInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface PeriodicPrizeStrategyInterface {\\n  function startAward() external;\\n  function completeAward() external;\\n  function canStartAward() external view returns (bool);\\n  function canCompleteAward() external view returns (bool);\\n}\",\"keccak256\":\"0x109f0a01f57f08936e7bb94fe357fa71e7237794f6f8576c37c773a80dcd155f\",\"license\":\"MIT\"},\"contracts/interfaces/PrizePoolInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface PrizePoolInterface {\\n    function prizeStrategy() external view returns (address);\\n}\",\"keccak256\":\"0x25c3deefae7b4f2270303b5646e28f49922853ae946173ca2032173bd1844210\",\"license\":\"MIT\"},\"contracts/interfaces/PrizePoolRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface PrizePoolRegistryInterface {\\n    function getPrizePools() external view returns(address[] memory);\\n}\",\"keccak256\":\"0x620c3e31149cdf62170e43f825aa8802a87ce7e677cd6c0c1c0722e45e6fe8ed\",\"license\":\"MIT\"},\"contracts/utils/SafeAwardable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/PeriodicPrizeStrategyInterface.sol\\\";\\n\\n\\n///@notice Wrapper library for address that checks that the address supports canStartAward() and canCompleteAward() before calling\\nlibrary SafeAwardable{\\n\\n    ///@return canCompleteAward returns true if the function is supported AND can be completed \\n    function canCompleteAward(address self) internal view returns (bool canCompleteAward){\\n        if(supportsFunction(self, PeriodicPrizeStrategyInterface.canCompleteAward.selector)){\\n            return PeriodicPrizeStrategyInterface(self).canCompleteAward();      \\n        }\\n        return false;\\n    }\\n\\n    ///@return canStartAward returns true if the function is supported AND can be started, false otherwise\\n    function canStartAward(address self) internal view returns (bool canStartAward){\\n        if(supportsFunction(self, PeriodicPrizeStrategyInterface.canStartAward.selector)){\\n            return PeriodicPrizeStrategyInterface(self).canStartAward();\\n        }\\n        return false;\\n    }\\n    \\n    ///@param selector is the function selector to check against\\n    ///@return success returns true if function is implemented, false otherwise\\n    function supportsFunction(address self, bytes4 selector) internal view returns (bool success){\\n        bytes memory encodedParams = abi.encodeWithSelector(selector);\\n        (bool success, bytes memory result) = self.staticcall{ gas: 30000 }(encodedParams);\\n        if (result.length < 32){\\n            return (false);\\n        }\\n        if(!success && result.length > 0){\\n            revert(string(result));\\n        }\\n        return (success);\\n    }\\n}\",\"keccak256\":\"0xf5e2d50a8057812732975074254054c6b7717a97f34ec9be494a4c86663137e5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80636e04ff0d11610097578063ad06337f11610066578063ad06337f146101be578063ba450a1a146101c6578063f2085170146101ce578063f2fde38b146101e1576100f5565b80636e04ff0d14610178578063715018a6146101995780638456cb59146101a15780638da5cb5b146101a9576100f5565b80634585e33b116100d35780634585e33b146101355780634fd47a76146101485780635c975abb146101505780635fdc3b5814610165576100f5565b80632dc41821146100fa5780633f4ba83a1461011857806343d73f2d14610122575b600080fd5b6101026101f4565b60405161010f9190611174565b60405180910390f35b6101206101fa565b005b610120610130366004610ee1565b610266565b610120610143366004610ff5565b61031e565b61010261062c565b610158610632565b60405161010f91906110d6565b610120610173366004611062565b610642565b61018b610186366004610ff5565b6106d9565b60405161010f9291906110e1565b610120610905565b6101206109b1565b6101b1610a1b565b60405161010f91906110c2565b6101b1610a2a565b610102610a39565b6101206101dc366004611062565b610a3f565b6101206101ef366004610ee1565b610ad6565b60025481565b610202610bd8565b6001600160a01b0316610213610a1b565b6001600160a01b03161461025c576040805162461bcd60e51b815260206004820181905260248201526000805160206111fa833981519152604482015290519081900360640190fd5b610264610bdc565b565b61026e610bd8565b6001600160a01b031661027f610a1b565b6001600160a01b0316146102c8576040805162461bcd60e51b815260206004820181905260248201526000805160206111fa833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0383161790556040517f3945779a0b94143e19ceb0254d7ff1fbe6c4265b6328031e7cc1274c2b8d77c7906103139083906110c2565b60405180910390a150565b610326610632565b1561036b576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6003546004548101431161039a5760405162461bcd60e51b815260040161039190611117565b60405180910390fd5b600154604080516351cfd60960e11b815290516000926001600160a01b03169163a39fac129160048083019286929190829003018186803b1580156103de57600080fd5b505afa1580156103f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261041a9190810190610f20565b60025490915060008080805b6000851180156104365750855184105b156105c357600086858151811061044957fe5b60200260200101516001600160a01b03166398bf3eb66040518163ffffffff1660e01b815260040160206040518083038186803b15801561048957600080fd5b505afa15801561049d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c19190610f04565b90506104d5816001600160a01b0316610c7f565b1561053f57806001600160a01b031663b9ee1e056040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561051557600080fd5b505af1158015610529573d6000803e3d6000fd5b50506000199097019650506001909301926105b7565b610551816001600160a01b0316610d18565b156105b757806001600160a01b031663dfb2f13b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561059157600080fd5b505af11580156105a5573d6000803e3d6000fd5b50506000199097019650506001909201915b50600190930192610426565b60008311806105d25750600082115b156105da5750435b8087146106215760038190556040517f9fbc2aeb5bf6200e5499d345acddf1dd462c37becb4673d661250b89ced7ff6a90610618908590859061117d565b60405180910390a15b505050505050505050565b60045481565b600054600160a01b900460ff1690565b61064a610bd8565b6001600160a01b031661065b610a1b565b6001600160a01b0316146106a4576040805162461bcd60e51b815260206004820181905260248201526000805160206111fa833981519152604482015290519081900360640190fd5b60028190556040517fb722c0a05d55d91208263d973f28b92fc9599d46d7c490ff2efae89d8f3ddfe890610313908390611174565b60006060600454600354014310156106f457600091506108fe565b600154604080516351cfd60960e11b815290516000926001600160a01b03169163a39fac129160048083019286929190829003018186803b15801561073857600080fd5b505afa15801561074c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107749190810190610f20565b905060005b815181101561083657600082828151811061079057fe5b60200260200101516001600160a01b03166398bf3eb66040518163ffffffff1660e01b815260040160206040518083038186803b1580156107d057600080fd5b505afa1580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108089190610f04565b905061081c816001600160a01b0316610c7f565b1561082d57600194505050506108fe565b50600101610779565b5060005b81518110156108f757600082828151811061085157fe5b60200260200101516001600160a01b03166398bf3eb66040518163ffffffff1660e01b815260040160206040518083038186803b15801561089157600080fd5b505afa1580156108a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c99190610f04565b90506108dd816001600160a01b0316610d18565b156108ee57600194505050506108fe565b5060010161083a565b5060009250505b9250929050565b61090d610bd8565b6001600160a01b031661091e610a1b565b6001600160a01b031614610967576040805162461bcd60e51b815260206004820181905260248201526000805160206111fa833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6109b9610bd8565b6001600160a01b03166109ca610a1b565b6001600160a01b031614610a13576040805162461bcd60e51b815260206004820181905260248201526000805160206111fa833981519152604482015290519081900360640190fd5b610264610d69565b6000546001600160a01b031690565b6001546001600160a01b031681565b60035481565b610a47610bd8565b6001600160a01b0316610a58610a1b565b6001600160a01b031614610aa1576040805162461bcd60e51b815260206004820181905260248201526000805160206111fa833981519152604482015290519081900360640190fd5b60048190556040517f7a5354403e343fa02d40d3906b696f894d8b73fb8a898b07d7414f29866ef5d390610313908390611174565b610ade610bd8565b6001600160a01b0316610aef610a1b565b6001600160a01b031614610b38576040805162461bcd60e51b815260206004820181905260248201526000805160206111fa833981519152604482015290519081900360640190fd5b6001600160a01b038116610b7d5760405162461bcd60e51b81526004018080602001828103825260268152602001806111d46026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b610be4610632565b610c2c576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610c62610bd8565b604080516001600160a01b039092168252519081900360200190a1565b6000610c92826343b7ae3f60e11b610df2565b15610d0f57816001600160a01b031663876f5c7e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cd057600080fd5b505afa158015610ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d089190610fd5565b9050610d13565b5060005b919050565b6000610d2b82636a74f10760e01b610df2565b15610d0f57816001600160a01b0316636a74f1076040518163ffffffff1660e01b815260040160206040518083038186803b158015610cd057600080fd5b610d71610632565b15610db6576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610c62610bd8565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198516179052905160009190829081906001600160a01b0387169061753090610e419086906110a6565b6000604051808303818686fa925050503d8060008114610e7d576040519150601f19603f3d011682016040523d82523d6000602084013e610e82565b606091505b5091509150602081511015610e9d5760009350505050610ed0565b81158015610eac575060008151115b15610ecb578060405162461bcd60e51b81526004016103919190611104565b509150505b92915050565b8051610d13816111bb565b600060208284031215610ef2578081fd5b8135610efd816111bb565b9392505050565b600060208284031215610f15578081fd5b8151610efd816111bb565b60006020808385031215610f32578182fd5b825167ffffffffffffffff80821115610f49578384fd5b818501915085601f830112610f5c578384fd5b815181811115610f6857fe5b83810260405185828201018181108582111715610f8157fe5b604052828152858101935084860182860187018a1015610f9f578788fd5b8795505b83861015610fc857610fb481610ed6565b855260019590950194938601938601610fa3565b5098975050505050505050565b600060208284031215610fe6578081fd5b81518015158114610efd578182fd5b60008060208385031215611007578081fd5b823567ffffffffffffffff8082111561101e578283fd5b818501915085601f830112611031578283fd5b81358181111561103f578384fd5b866020828501011115611050578384fd5b60209290920196919550909350505050565b600060208284031215611073578081fd5b5035919050565b6000815180845261109281602086016020860161118b565b601f01601f19169290920160200192915050565b600082516110b881846020870161118b565b9190910192915050565b6001600160a01b0391909116815260200190565b901515815260200190565b60008315158252604060208301526110fc604083018461107a565b949350505050565b600060208252610efd602083018461107a565b60208082526037908201527f5072697a65537472617465677955706b6565703a3a6d696e696d756d20626c6f60408201527f636b20696e74657276616c206e6f742072656163686564000000000000000000606082015260800190565b90815260200190565b918252602082015260400190565b60005b838110156111a657818101518382015260200161118e565b838111156111b5576000848401525b50505050565b6001600160a01b03811681146111d057600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122058c3c8e025b5084c274ca3a352fc736928ba1fedccd5d78be622b9084acd08c664736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "params": {
          "checkData": "Not used in this implementation."
        },
        "returns": {
          "upkeepNeeded": "as true if performUpkeep() needs to be called, false otherwise. performData returned empty. "
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "performUpkeep(bytes)": {
        "params": {
          "performData": "Not used in this implementation."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePrizePoolRegistry(address)": {
        "params": {
          "_prizePoolRegistry": "New registry address"
        }
      },
      "updateUpkeepBatchSize(uint256)": {
        "params": {
          "_upkeepBatchSize": "Amount upkeepBatchSize will be set to"
        }
      },
      "updateUpkeepMinimumBlockInterval(uint256)": {
        "params": {
          "_upkeepMinimumBlockInterval": "New upkeepMinimumBlockInterval"
        }
      }
    },
    "stateVariables": {
      "upkeepBatchSize": {
        "details": "Set accordingly to prevent out-of-gas transactions during calls to performUpkeep"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "UpkeepBatchSizeUpdated(uint256)": {
        "notice": "Emitted when the upkeepBatchSize has been changed"
      },
      "UpkeepMinimumBlockIntervalUpdated(uint256)": {
        "notice": "Emitted when the Upkeep Minimum Block interval is updated"
      },
      "UpkeepPerformed(uint256,uint256)": {
        "notice": "Emitted when the Upkeep has been performed"
      },
      "UpkeepPrizePoolRegistryUpdated(address)": {
        "notice": "Emitted when the prize pool registry has been changed"
      }
    },
    "kind": "user",
    "methods": {
      "checkUpkeep(bytes)": {
        "notice": "Checks if PrizePools require upkeep. Call in a static manner every block by the Chainlink Upkeep network."
      },
      "pause()": {
        "notice": "Pauses the contract. Only callable by owner."
      },
      "performUpkeep(bytes)": {
        "notice": "Performs upkeep on the prize pools. "
      },
      "prizePoolRegistry()": {
        "notice": "Stores the maximum number of prize strategies to upkeep. "
      },
      "unpause()": {
        "notice": "Unpauses the contract. Only callable by owner."
      },
      "updatePrizePoolRegistry(address)": {
        "notice": "Updates the prize pool registry"
      },
      "updateUpkeepBatchSize(uint256)": {
        "notice": "Updates the upkeepBatchSize which is set to prevent out of gas situations"
      },
      "updateUpkeepMinimumBlockInterval(uint256)": {
        "notice": "Updates the upkeep minimum interval blocks"
      },
      "upkeepBatchSize()": {
        "notice": "Stores the maximum number of prize strategies to upkeep. "
      },
      "upkeepLastUpkeepBlockNumber()": {
        "notice": "Stores the last upkeep block number"
      },
      "upkeepMinimumBlockInterval()": {
        "notice": "Stores the minimum block interval between permitted performUpkeep() calls"
      }
    },
    "notice": "Contract implements Chainlink's Upkeep system interface, automating the upkeep of PrizePools in the associated registry. ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PrizeStrategyUpkeep.sol:PrizeStrategyUpkeep",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 150,
        "contract": "contracts/PrizeStrategyUpkeep.sol:PrizeStrategyUpkeep",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 821,
        "contract": "contracts/PrizeStrategyUpkeep.sol:PrizeStrategyUpkeep",
        "label": "prizePoolRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AddressRegistry)413"
      },
      {
        "astId": 824,
        "contract": "contracts/PrizeStrategyUpkeep.sol:PrizeStrategyUpkeep",
        "label": "upkeepBatchSize",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 827,
        "contract": "contracts/PrizeStrategyUpkeep.sol:PrizeStrategyUpkeep",
        "label": "upkeepLastUpkeepBlockNumber",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 830,
        "contract": "contracts/PrizeStrategyUpkeep.sol:PrizeStrategyUpkeep",
        "label": "upkeepMinimumBlockInterval",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AddressRegistry)413": {
        "encoding": "inplace",
        "label": "contract AddressRegistry",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}